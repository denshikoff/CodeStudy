program Test_tusk;
{Проверить правильность расстановки скобок 3-х типов в выражении.}
{$APPTYPE CONSOLE}

uses
  SysUtils, UStack, Windows;
const
  open = ['(', '[', '{'];
  close = [')', ']', '}'];


var
  S : String;
  Res : Integer;
 
//Для закрывающей скобки возвращает соответствующую открывающую скобку.
function GetOpen(const aCh : Char) : Char;
begin
  GetOpen := #0;
  case aCh of
    ')' : GetOpen := '(';
    ']' : GetOpen := '[';
    '}' : GetOpen := '{';
  else
    Writeln('function GetOpen. Ошибка.');
  end;
end;


//Исследование строки на предмет согласованности скобок.
function ParsePh(const aStr : String) : Integer;
var
  Stack : TStack;
  i, Res : Integer;
  Ch : Char;
begin
  //Инициализируем стек.
  Stack.top := 0;

  Res := 0;
  for i := 1 to Length(aStr) do
    if aStr[i] in open then begin
      //Нашли открывающую скобку - добавляем её в стек
      if not PushStack(Stack, aStr[i]) then begin
        //-2 переполнение стека
        Res := -2;
        Break;
      end;
    end else if aStr[i] in close then begin;
      //Нашли закрывающу скобку - берём элемент из вершины стека.
      if PopStack(Stack, Ch) then begin
        //Стек не пуст
        if Ch <> GetOpen(aStr[i]) then begin
          {Взятая из вершины стека скобка не соответствует текущей закрывающей скобке.
          Согласованность нарушена.
          (Res > 0) - нарушение целостности, Res равен индексу символа (скобки) на котором
          произошло нарушение согласованности скобок. }
          Res := i;
          Break;
        end;
      end else begin
          {Стек пуст. Значит нет соответствия для текущей закрывающей скобки.
          Согласованность нарушена.
          (Res > 0) - нарушение целостности, Res равен индексу символа (скобки) на котором
          произошло нарушение согласованности скобок.     }
        Res := i;
        Break;
      end;
    end;

   //Если стек пуст - скобки согласованы. Иначе - не согласованы.
   //-1 - не хватает закрывающих скобок.
  if PopStack(Stack, Ch) then Res := -1;
 
  ParsePh := Res;
end;


begin
  SetConsoleCP(1251);
  SetConsoleOutputCp(1251);
  repeat
    Writeln('Введите строку:');
    Readln(S);
 
    Res := ParsePh(S);
    case Res of
      -2 : Writeln('Ошибка!Переполнение стека.');
      -1 : Writeln('Не хватает закрывающихся скобок.');
      0  : Writeln('Скобки согласованы.');
      else
        Writeln('Скобкине несогласованы');
    end;

    Writeln('Повторить - Enter, выход любой другой символ + Enter.');
    Readln(S);
  until S <> '';
end.
